{
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "modifyAppointment",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -3540,
        1080
      ],
      "id": "134795f7-36af-469a-ad9c-11607f3888f7",
      "name": "Webhook",
      "webhookId": "54f54781-9ecb-4a13-9bc7-26454761b588"
    },
    {
      "parameters": {
        "jsCode": "// Extract and validate modification data from webhook body\nconst body = $input.first().json.body;\n\n// Validate required appointment_id\nif (!body.appointment_id) {\n  return [{\n    json: {\n      status: 'failure',\n      message: 'Missing required field: appointment_id',\n      data: {\n        missing_fields: ['appointment_id'],\n        timestamp: new Date().toISOString()\n      }\n    }\n  }];\n}\n\n// Validate updates object exists\nif (!body.updates || typeof body.updates !== 'object') {\n  return [{\n    json: {\n      status: 'failure',\n      message: 'Missing or invalid updates object',\n      data: {\n        timestamp: new Date().toISOString()\n      }\n    }\n  }];\n}\n\nconst updates = body.updates;\n\n// Validate at least one field to update\nif (Object.keys(updates).length === 0) {\n  return [{\n    json: {\n      status: 'failure',\n      message: 'No fields to update',\n      data: {\n        timestamp: new Date().toISOString()\n      }\n    }\n  }];\n}\n\n// Validate date format if provided (YYYY-MM-DD)\nif (updates.date && !/^\\d{4}-\\d{2}-\\d{2}$/.test(updates.date)) {\n  return [{\n    json: {\n      status: 'failure',\n      message: 'Invalid date format. Expected YYYY-MM-DD',\n      data: {\n        provided_date: updates.date,\n        timestamp: new Date().toISOString()\n      }\n    }\n  }];\n}\n\n// Validate time format if provided (HH:MM)\nif (updates.time && !/^\\d{2}:\\d{2}$/.test(updates.time)) {\n  return [{\n    json: {\n      status: 'failure',\n      message: 'Invalid time format. Expected HH:MM',\n      data: {\n        provided_time: updates.time,\n        timestamp: new Date().toISOString()\n      }\n    }\n  }];\n}\n\n// Validate timezone format if provided\nif (updates.timezone && updates.timezone.length < 3) {\n  return [{\n    json: {\n      status: 'failure',\n      message: 'Invalid timezone format',\n      data: {\n        provided_timezone: updates.timezone,\n        timestamp: new Date().toISOString()\n      }\n    }\n  }];\n}\n\n// Extract service from service object if provided\nlet selectedService = updates.service;\nif (updates.service && typeof updates.service === 'object') {\n  selectedService = Object.keys(updates.service).find(key => updates.service[key] === true);\n  if (!selectedService) {\n    return [{\n      json: {\n        status: 'failure',\n        message: 'No service selected',\n        data: {\n          timestamp: new Date().toISOString()\n        }\n      }\n    }];\n  }\n}\n\n// Success: Return validated data\nreturn [{\n  json: {\n    appointment_id: body.appointment_id,\n    updates: {\n      ...(updates.name && { name: updates.name }),\n      ...(updates.date && { date: updates.date }),\n      ...(updates.time && { time: updates.time }),\n      ...(updates.phone && { phone: updates.phone }),\n      ...(selectedService && { service: selectedService }),\n      ...(updates.timezone && { timezone: updates.timezone }),\n      ...(updates.notes !== undefined && { notes: updates.notes })\n    }\n  }\n}];"
      },
      "id": "e8d1b9a0-cce7-4cb1-8291-6565dfd033ca",
      "name": "Validate & Extract Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3320,
        1080
      ]
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1O3BVuQ_ceTCP5UbIg5Y-lFtWtkyhey_rp9cVAvMAOv0",
          "mode": "list",
          "cachedResultName": "Fake CRM",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1O3BVuQ_ceTCP5UbIg5Y-lFtWtkyhey_rp9cVAvMAOv0/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1777679575,
          "mode": "list",
          "cachedResultName": "Appointments",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1O3BVuQ_ceTCP5UbIg5Y-lFtWtkyhey_rp9cVAvMAOv0/edit#gid=1777679575"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        -3080,
        660
      ],
      "id": "49174a8e-456b-4485-9488-77dfcda78a85",
      "name": "Get Existing Appointment",
      "alwaysOutputData": true,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "S8SEj6XfWzKC8Ohj",
          "name": "Google Sheets"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Merge existing appointment data with updates\nconst items = $input.all();\n\n// Check for validation failures from earlier nodes\nconst validationFailure = items.find(item => item.json.status === 'failure');\nif (validationFailure) {\n  return [{ json: validationFailure.json }];\n}\n\n// Find update data (has appointment_id and updates fields)\nconst updateData = items.find(item => item.json.appointment_id && item.json.updates);\n\n// Find existing appointment from Google Sheets\nconst existingAppointment = items.find(item => \n  item.json.Name && item.json['Google Calendar Event ID']\n);\n\nif (!updateData) {\n  return [{\n    json: {\n      status: 'failure',\n      message: 'Update data not found',\n      data: {\n        timestamp: new Date().toISOString()\n      }\n    }\n  }];\n}\n\nif (!existingAppointment) {\n  return [{\n    json: {\n      status: 'failure',\n      message: 'Appointment not found',\n      data: {\n        appointment_id: updateData.json.appointment_id,\n        timestamp: new Date().toISOString()\n      }\n    }\n  }];\n}\n\nconst existing = existingAppointment.json;\nconst updates = updateData.json.updates;\n\n// Merge existing data with updates (updates override existing)\nconst mergedData = {\n  appointment_id: updateData.json.appointment_id,\n  name: updates.name || existing.Name,\n  date: updates.date || existing.Date,\n  time: updates.time || existing.Time,\n  phone: updates.phone || existing.Phone,\n  service: updates.service || existing.Service,\n  timezone: updates.timezone || existing.Timezone || 'America/Chicago',\n  notes: updates.notes !== undefined ? updates.notes : existing.Notes,\n  row_number: existing.row_number || null\n};\n\nreturn [{ json: mergedData }];"
      },
      "id": "cf89ac02-908a-4b9f-b6e4-5cd466ab0895",
      "name": "Merge with Existing Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2660,
        900
      ]
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1O3BVuQ_ceTCP5UbIg5Y-lFtWtkyhey_rp9cVAvMAOv0",
          "mode": "list",
          "cachedResultName": "Fake CRM",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1O3BVuQ_ceTCP5UbIg5Y-lFtWtkyhey_rp9cVAvMAOv0/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1375861924,
          "mode": "list",
          "cachedResultName": "Service Types",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1O3BVuQ_ceTCP5UbIg5Y-lFtWtkyhey_rp9cVAvMAOv0/edit#gid=1375861924"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        -2660,
        2360
      ],
      "id": "9ddf710c-c492-4280-ac19-eb57d7465f0b",
      "name": "Get Service Types",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "S8SEj6XfWzKC8Ohj",
          "name": "Google Sheets"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Match merged appointment data with service types and calculate duration\nconst items = $input.all();\n\n// Check for validation failures from earlier nodes\nconst failure = items.find(item => item.json.status === 'failure');\nif (failure) {\n  return [{ json: failure.json }];\n}\n\n// Find the merged appointment data (has appointment_id, name, service, etc.)\nconst appointmentData = items.find(item => \n  item.json.appointment_id && item.json.service && item.json.name\n);\n\nif (!appointmentData) {\n  return [{\n    json: {\n      status: 'failure',\n      message: 'Appointment data not found for service matching',\n      data: {\n        timestamp: new Date().toISOString()\n      }\n    }\n  }];\n}\n\n// Find all service types (have \"Service Type\" and \"Duration (minutes)\" fields)\nconst serviceTypes = items.filter(item => \n  item.json[\"Service Type\"] && item.json[\"Duration (minutes)\"]\n);\n\nif (serviceTypes.length === 0) {\n  return [{\n    json: {\n      status: 'failure',\n      message: 'No service types found',\n      data: {\n        timestamp: new Date().toISOString()\n      }\n    }\n  }];\n}\n\n// Match the appointment's service to a service type\nconst matchedService = serviceTypes.find(st => \n  st.json[\"Service Type\"] === appointmentData.json.service\n);\n\nif (!matchedService) {\n  return [{\n    json: {\n      status: 'failure',\n      message: `Service type '${appointmentData.json.service}' not found`,\n      data: {\n        requested_service: appointmentData.json.service,\n        available_services: serviceTypes.map(st => st.json[\"Service Type\"]),\n        timestamp: new Date().toISOString()\n      }\n    }\n  }];\n}\n\n// Calculate end datetime based on service duration\nconst durationMinutes = parseInt(matchedService.json['Duration (minutes)']);\nconst timezone = appointmentData.json.timezone;\nconst [startHours, startMinutes] = appointmentData.json.time.split(':').map(Number);\n\nlet totalMinutes = startHours * 60 + startMinutes + durationMinutes;\nconst daysToAdd = Math.floor(totalMinutes / (24 * 60));\nconst endHours = Math.floor(totalMinutes / 60) % 24;\nconst endMinutes = totalMinutes % 60;\n\nconst endTime = `${String(endHours).padStart(2, '0')}:${String(endMinutes).padStart(2, '0')}`;\n\nlet endDate = appointmentData.json.date;\nif (daysToAdd > 0) {\n  const startDateObj = new Date(appointmentData.json.date + 'T00:00:00');\n  startDateObj.setDate(startDateObj.getDate() + daysToAdd);\n  endDate = startDateObj.toISOString().split('T')[0];\n}\n\nconst startDatetimeString = `${appointmentData.json.date}T${appointmentData.json.time}:00`;\nconst endDatetimeString = `${endDate}T${endTime}:00`;\n\n// Return merged data with duration calculations\nreturn [{\n  json: {\n    ...appointmentData.json,\n    \"Service Type\": matchedService.json[\"Service Type\"],\n    \"Duration (minutes)\": durationMinutes,\n    duration_minutes: durationMinutes,\n    start_datetime: startDatetimeString,\n    end_datetime: endDatetimeString,\n    end_date: endDate,\n    end_time: endTime,\n    timezone: timezone\n  }\n}];"
      },
      "id": "389355c3-9d72-4097-8b88-ae1140375290",
      "name": "Match Service Type & Calculate Duration",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2220,
        980
      ]
    },
    {
      "parameters": {
        "jsCode": "// Toggle for availability checking\nconst ENABLE_AVAILABILITY_CHECK = true;\n\nconst data = $input.first().json;\n\nreturn [{\n  json: {\n    ...data,\n    check_availability: ENABLE_AVAILABILITY_CHECK\n  }\n}];"
      },
      "id": "51b9546e-eae7-4914-9928-9bdfd66b7a08",
      "name": "Availability Check Toggle",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2000,
        1740
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "4da0140a-b517-4eb1-947b-fe69dc58e6c3",
              "leftValue": "={{ $json.check_availability }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "cd196518-741a-479c-ab57-fa3d37c36302",
      "name": "Should Check Availability?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -1780,
        1740
      ]
    },
    {
      "parameters": {
        "operation": "getAll",
        "calendar": {
          "__rl": true,
          "value": "b16200b3b0481c53ee04532493920b8ba603b382a2e0b6095d11156475414c0c@group.calendar.google.com",
          "mode": "list",
          "cachedResultName": "Layer 7 System's Caroline Smith Salon Partnership"
        },
        "returnAll": true,
        "timeMin": "={{ $json.start_datetime }}",
        "timeMax": "={{ $json.end_datetime }}",
        "options": {
          "timeZone": {
            "__rl": true,
            "value": "={{ $json.timezone }}",
            "mode": "id"
          }
        }
      },
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1.3,
      "position": [
        -1560,
        1740
      ],
      "id": "4d342f62-8409-49c4-92e1-f186d7103660",
      "name": "Check Calendar Conflicts",
      "alwaysOutputData": true,
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "hoMR3q3gb9pxlxTs",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {},
      "id": "a6c3f94d-2db9-45af-ab14-0b3714163749",
      "name": "Merge Calendar Check with Appointment",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        -1340,
        860
      ]
    },
    {
      "parameters": {
        "jsCode": "// Evaluate conflicts excluding the current appointment being modified\nconst items = $input.all();\n\nconst appointmentData = items.find(item => \n  item.json.name && item.json.service && item.json.start_datetime\n);\n\nconst calendarEvents = items.filter(item => \n  item.json.id && item.json.start && item.json.created\n);\n\nif (!appointmentData) {\n  throw new Error('Appointment data not found in merge.');\n}\n\n// Filter out the appointment being modified (same event ID)\nconst conflicts = calendarEvents.filter(event => \n  event.json.id !== appointmentData.json.appointment_id\n);\n\nif (conflicts.length > 0) {\n  return [{\n    json: {\n      status: 'failure',\n      message: 'Time slot is not available. There is already an appointment scheduled at this time.',\n      data: {\n        requested_date: appointmentData.json.date,\n        requested_time: appointmentData.json.time,\n        requested_timezone: appointmentData.json.timezone,\n        conflicts: conflicts.map(event => ({\n          summary: event.json.summary || 'Untitled Event',\n          start: event.json.start?.dateTime || event.json.start?.date,\n          end: event.json.end?.dateTime || event.json.end?.date\n        })),\n        timestamp: new Date().toISOString()\n      }\n    }\n  }];\n}\n\nreturn [{ json: { ...appointmentData.json } }];"
      },
      "id": "a9a7b42d-e222-401c-99aa-15a4667fb951",
      "name": "Evaluate Conflicts",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1120,
        940
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "367aeb22-1827-49ac-9098-4c9fb74c3ca7",
              "leftValue": "={{ $json.status }}",
              "rightValue": "failure",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "e2170f64-8d2c-4f99-b306-32d142e8b2b7",
      "name": "Is Slot Available?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -900,
        1100
      ]
    },
    {
      "parameters": {
        "operation": "delete",
        "calendar": {
          "__rl": true,
          "value": "b16200b3b0481c53ee04532493920b8ba603b382a2e0b6095d11156475414c0c@group.calendar.google.com",
          "mode": "list",
          "cachedResultName": "Layer 7 System's Caroline Smith Salon Partnership"
        },
        "eventId": "={{ $json.appointment_id }}",
        "options": {}
      },
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1.3,
      "position": [
        -680,
        1300
      ],
      "id": "5f6777f7-7d9e-4943-9711-152411796a00",
      "name": "Delete Old Calendar Event",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "hoMR3q3gb9pxlxTs",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {},
      "id": "a45e5d85-8994-42b7-82cd-7ae0e55aba65",
      "name": "Merge Delete with Appointment",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        -560,
        940
      ]
    },
    {
      "parameters": {
        "calendar": {
          "__rl": true,
          "value": "b16200b3b0481c53ee04532493920b8ba603b382a2e0b6095d11156475414c0c@group.calendar.google.com",
          "mode": "list",
          "cachedResultName": "Layer 7 System's Caroline Smith Salon Partnership"
        },
        "start": "={{ $json.start_datetime }}",
        "end": "={{ $json.end_datetime }}",
        "useDefaultReminders": false,
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1.3,
      "position": [
        -240,
        1040
      ],
      "id": "9c70119d-9d9f-4450-944d-1bf07e730532",
      "name": "Create New Calendar Event",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "hoMR3q3gb9pxlxTs",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {},
      "id": "966e2561-2d52-4834-8ae3-0b2e883c6e7a",
      "name": "Merge New Event with Appointment",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        -20,
        960
      ]
    },
    {
      "parameters": {
        "jsCode": "// Extract new calendar event ID for Google Sheets update\n// Only extract what's needed: old appointment_id (to find the row) and new event ID (to update)\nconst items = $input.all();\n\n// Find appointment data (has appointment_id to identify which row to update)\nconst appointmentData = items.find(item => \n  item.json.appointment_id\n);\n\n// Find new calendar event (has id from create operation)\nconst calendarEvent = items.find(item => \n  item.json.id && item.json.summary\n);\n\nif (!appointmentData) {\n  return [{\n    json: {\n      status: 'failure',\n      message: 'Appointment identifier not found for update',\n      data: {\n        timestamp: new Date().toISOString()\n      }\n    }\n  }];\n}\n\nif (!calendarEvent) {\n  return [{\n    json: {\n      status: 'failure',\n      message: 'New calendar event not found',\n      data: {\n        timestamp: new Date().toISOString()\n      }\n    }\n  }];\n}\n\n// Return ONLY what's needed for the Google Sheets update\nreturn [{\n  json: {\n    old_appointment_id: appointmentData.json.appointment_id,\n    new_appointment_id: calendarEvent.json.id\n  }\n}];"
      },
      "id": "15c594ba-f009-4430-af9b-32bf1df65e2e",
      "name": "Extract New Event ID",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        200,
        1000
      ]
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1O3BVuQ_ceTCP5UbIg5Y-lFtWtkyhey_rp9cVAvMAOv0",
          "mode": "list",
          "cachedResultName": "Fake CRM",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1O3BVuQ_ceTCP5UbIg5Y-lFtWtkyhey_rp9cVAvMAOv0/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1777679575,
          "mode": "list",
          "cachedResultName": "Appointments",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1O3BVuQ_ceTCP5UbIg5Y-lFtWtkyhey_rp9cVAvMAOv0/edit#gid=1777679575"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Google Calendar Event ID": "={{ $json.new_appointment_id }}"
          },
          "matchingColumns": [
            "Google Calendar Event ID"
          ],
          "schema": [
            {
              "id": "Google Calendar Event ID",
              "displayName": "Google Calendar Event ID",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "readOnly": false,
              "removed": false
            }
          ]
        },
        "columnToMatchOn": "Google Calendar Event ID",
        "valueToMatchOn": "={{ $json.old_appointment_id }}",
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        420,
        1060
      ],
      "id": "0c03aa2e-9ac1-49e6-966c-1ce873602a69",
      "name": "Update Appointments Sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "S8SEj6XfWzKC8Ohj",
          "name": "Google Sheets"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Format success response\nconst data = $input.first().json;\n\nreturn [{\n  json: {\n    status: 'success',\n    message: 'Appointment modified successfully.',\n    data: {\n      appointment_id: data.new_appointment_id || data['Google Calendar Event ID'],\n      name: data.Name || data.name,\n      date: data.Date || data.date,\n      time: data.Time || data.time,\n      phone: data.Phone || data.phone,\n      service: data.Service || data.service,\n      notes: data.Notes || data.notes\n    }\n  }\n}];"
      },
      "id": "1bc391cc-3272-4f95-9b69-9f3fbaded182",
      "name": "Format Success Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        640,
        1660
      ]
    },
    {
      "parameters": {
        "jsCode": "// Handle validation failures\nconst data = $input.first().json;\n\nif (data.status === 'failure') {\n  return [{ json: data }];\n}\n\nreturn [];"
      },
      "id": "4bed9ccc-5d74-44bb-873d-921ac21feb13",
      "name": "Handle Validation Failure",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        420,
        500
      ]
    },
    {
      "parameters": {
        "jsCode": "// Handle system errors\nconst inputItem = $input.first();\nconst inputData = inputItem.json || {};\nconst errorInfo = inputItem.error;\n\nif (!errorInfo || !errorInfo.message) {\n  if (inputData.status === 'success' || inputData.Name || inputData.id || inputData) {\n    return [];\n  }\n  \n  return [{\n    json: {\n      status: 'error',\n      message: 'An unexpected error occurred during modification.',\n      data: {\n        error_type: 'UNKNOWN_ERROR',\n        error_name: 'UnexpectedError',\n        timestamp: new Date().toISOString(),\n        retry_possible: true,\n        technical_details: {\n          note: 'Error handler triggered without error details',\n          input_data: inputData\n        }\n      }\n    }\n  }];\n}\n\nreturn [{\n  json: {\n    status: 'error',\n    message: errorInfo.message || 'A system error occurred while modifying the appointment.',\n    data: {\n      error_type: errorInfo.code || 'MODIFY_ERROR',\n      error_name: errorInfo.name || 'SystemError',\n      timestamp: new Date().toISOString(),\n      retry_possible: true,\n      technical_details: {\n        error_message: errorInfo.message,\n        error_stack: errorInfo.stack,\n        node_name: errorInfo.node?.name\n      }\n    }\n  }\n}];"
      },
      "id": "8915f085-f7f6-4c84-a296-700de1d7d385",
      "name": "Handle System Error",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        640,
        1460
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "4c919f15-c9ae-474d-9cb3-521d91f08915",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        860,
        1140
      ]
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        -2880,
        900
      ],
      "id": "e4d206a9-f934-4887-a7a3-713d9874d167",
      "name": "Merge Validation with Existing Appointment"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        -2440,
        980
      ],
      "id": "2e5780fe-663c-4c0e-a47c-3c5f964dd53b",
      "name": "Merge Appointment with Service Types"
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Validate & Extract Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate & Extract Data": {
      "main": [
        [
          {
            "node": "Get Existing Appointment",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Service Types",
            "type": "main",
            "index": 0
          },
          {
            "node": "Handle Validation Failure",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge Validation with Existing Appointment",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Get Existing Appointment": {
      "main": [
        [
          {
            "node": "Handle System Error",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge Validation with Existing Appointment",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge with Existing Data": {
      "main": [
        [
          {
            "node": "Handle Validation Failure",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge Appointment with Service Types",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Service Types": {
      "main": [
        [
          {
            "node": "Handle System Error",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge Appointment with Service Types",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Match Service Type & Calculate Duration": {
      "main": [
        [
          {
            "node": "Availability Check Toggle",
            "type": "main",
            "index": 0
          },
          {
            "node": "Handle Validation Failure",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Availability Check Toggle": {
      "main": [
        [
          {
            "node": "Should Check Availability?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Should Check Availability?": {
      "main": [
        [
          {
            "node": "Check Calendar Conflicts",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge Calendar Check with Appointment",
            "type": "main",
            "index": 1
          }
        ],
        [
          {
            "node": "Delete Old Calendar Event",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge Delete with Appointment",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Check Calendar Conflicts": {
      "main": [
        [
          {
            "node": "Merge Calendar Check with Appointment",
            "type": "main",
            "index": 0
          },
          {
            "node": "Handle System Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Calendar Check with Appointment": {
      "main": [
        [
          {
            "node": "Evaluate Conflicts",
            "type": "main",
            "index": 0
          },
          {
            "node": "Handle Validation Failure",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Evaluate Conflicts": {
      "main": [
        [
          {
            "node": "Is Slot Available?",
            "type": "main",
            "index": 0
          },
          {
            "node": "Handle Validation Failure",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is Slot Available?": {
      "main": [
        [
          {
            "node": "Delete Old Calendar Event",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge Delete with Appointment",
            "type": "main",
            "index": 1
          }
        ],
        [
          {
            "node": "Handle Validation Failure",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete Old Calendar Event": {
      "main": [
        [
          {
            "node": "Merge Delete with Appointment",
            "type": "main",
            "index": 0
          },
          {
            "node": "Handle System Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Delete with Appointment": {
      "main": [
        [
          {
            "node": "Create New Calendar Event",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge New Event with Appointment",
            "type": "main",
            "index": 1
          },
          {
            "node": "Handle Validation Failure",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create New Calendar Event": {
      "main": [
        [
          {
            "node": "Merge New Event with Appointment",
            "type": "main",
            "index": 0
          },
          {
            "node": "Handle System Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge New Event with Appointment": {
      "main": [
        [
          {
            "node": "Extract New Event ID",
            "type": "main",
            "index": 0
          },
          {
            "node": "Handle Validation Failure",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract New Event ID": {
      "main": [
        [
          {
            "node": "Update Appointments Sheet",
            "type": "main",
            "index": 0
          },
          {
            "node": "Handle Validation Failure",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Appointments Sheet": {
      "main": [
        [
          {
            "node": "Format Success Response",
            "type": "main",
            "index": 0
          },
          {
            "node": "Handle System Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Success Response": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Handle Validation Failure": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Handle System Error": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Validation with Existing Appointment": {
      "main": [
        [
          {
            "node": "Merge with Existing Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Appointment with Service Types": {
      "main": [
        [
          {
            "node": "Match Service Type & Calculate Duration",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {
    "Webhook": [
      {
        "headers": {
          "host": "n8n.srv836523.hstgr.cloud",
          "user-agent": "axios/1.11.0",
          "content-length": "60",
          "accept": "application/json, text/plain, */*",
          "accept-encoding": "gzip, compress, deflate, br",
          "content-type": "application/json",
          "x-forwarded-for": "100.20.5.228",
          "x-forwarded-host": "n8n.srv836523.hstgr.cloud",
          "x-forwarded-port": "443",
          "x-forwarded-proto": "https",
          "x-forwarded-server": "88373cf48b91",
          "x-real-ip": "100.20.5.228",
          "x-retell-signature": "v=1760004200142,d=61eeeb2ec56e7d0305ce5e0f5c16a83f465425af5397f93205074603b47551d5"
        },
        "params": {},
        "query": {},
        "body": {
          "updates": {
            "date": "2025-10-15",
            "time": "14:30"
          },
          "appointment_id": "pmd7s85na33dldg6hu0vorikk4"
        },
        "webhookUrl": "https://n8n.srv836523.hstgr.cloud/webhook-test/modifyAppointment",
        "executionMode": "test"
      }
    ]
  },
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "fb6957930478fef911a2c66f712c2194cb787efb785d4054dd3abe6cedcf5702"
  }
}