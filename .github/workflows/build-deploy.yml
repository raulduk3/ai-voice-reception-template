name: Build and Release Layer 7 AI Voice

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: "18"

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm install

      - name: Build optimized files
        run: npm run build

      - name: Display version info
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "🏷️ Building version: v${VERSION}"
          echo "## 📋 Build Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Template Version**: v${VERSION}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch/Ref**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY

      - name: Display build info
        run: |
          echo "## 📊 Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
          cat dist/build-info.json >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: layer7-ai-voice-dist
          path: dist/
          retention-days: 30

      - name: Create release archive
        if: github.ref == 'refs/heads/main'
        run: |
          cd dist
          tar -czf ../layer7-ai-voice-optimized.tar.gz *
          cd ..

      - name: Get version from package.json
        if: github.ref == 'refs/heads/main'
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=v${VERSION}" >> $GITHUB_OUTPUT
          echo "package_version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Current version: v${VERSION}"

      - name: Check if tag exists
        if: github.ref == 'refs/heads/main'
        id: tag_check
        run: |
          if git ls-remote --tags origin | grep -q "refs/tags/${{ steps.version.outputs.version }}$"; then
            echo "Tag ${{ steps.version.outputs.version }} already exists"
            echo "tag_exists=true" >> $GITHUB_OUTPUT
          else
            echo "Tag ${{ steps.version.outputs.version }} does not exist"
            echo "tag_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Release
        if: github.ref == 'refs/heads/main' && steps.tag_check.outputs.tag_exists == 'false'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: "Layer 7 AI Voice Template v${{ steps.version.outputs.package_version }}"
          body: |
            ## 🤖 Layer 7 AI Voice Receptionist Template - v${{ steps.version.outputs.package_version }}

            **Release Information:**
            - Version: ${{ steps.version.outputs.package_version }}
            - Commit: ${{ github.sha }}
            - Build Date: ${{ github.run_id }}
            - Files optimized with 30-40% size reduction

            **What's Included:**
            - `Layer 7 AI Voice Receptionist (POC) - Retell Agent.json` - Complete agent configuration
            - `prompts/Core Prompt.md` - Agent system instructions with template variables
            - `prompts/RAG Agent Prompt - answerQuestion.md` - Secure RAG system prompt
            - `n8n/*.json` - Complete N8N workflow automation suite
            - `build-info.json` - Detailed build statistics and optimization metrics

            **Usage:**
            1. Fork this repository for your client
            2. Download and extract the optimized files
            3. Customize template variables ({{agent_name}}, {{business_name}}, etc.)
            4. Upload configurations to Retell AI and N8N platforms

            **Template Variables to Customize:**
            - `{{agent_name}}` - AI agent name
            - `{{business_name}}` - Client business name
            - `{{ai_support_hours}}` - Support availability hours
            - N8N webhook URLs for your instance
          files: |
            layer7-ai-voice-optimized.tar.gz
          draft: false
          prerelease: false

      - name: Build Status Summary
        run: |
          echo "## 🚀 Layer 7 AI Voice Build Complete" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Status**: ✅ Success" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY

          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "- **Current Version**: ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Package Version**: ${{ steps.version.outputs.package_version }}" >> $GITHUB_STEP_SUMMARY
            
            if [ "${{ steps.tag_check.outputs.tag_exists }}" == "false" ]; then
              echo "- **Release Action**: 🎉 Created new release ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
              echo "- **Download**: [Latest Release](https://github.com/${{ github.repository }}/releases/latest)" >> $GITHUB_STEP_SUMMARY
            else
              echo "- **Release Action**: ⏭️ Skipped (version ${{ steps.version.outputs.version }} already exists)" >> $GITHUB_STEP_SUMMARY
              echo "- **Existing Releases**: [View All Releases](https://github.com/${{ github.repository }}/releases)" >> $GITHUB_STEP_SUMMARY
            fi
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 📊 Build Statistics" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
            cat dist/build-info.json >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### � Version Management" >> $GITHUB_STEP_SUMMARY
            echo "To create a new release:" >> $GITHUB_STEP_SUMMARY
            echo "- \`npm run release:patch\` - Bug fixes ($(echo ${{ steps.version.outputs.package_version }} | awk -F. '{print $1"."$2"."$3+1}'))" >> $GITHUB_STEP_SUMMARY
            echo "- \`npm run release:minor\` - New features ($(echo ${{ steps.version.outputs.package_version }} | awk -F. '{print $1"."$2+1".0"}'))" >> $GITHUB_STEP_SUMMARY  
            echo "- \`npm run release:major\` - Breaking changes ($(echo ${{ steps.version.outputs.package_version }} | awk -F. '{print $1+1".0.0"}'))" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Note**: Releases are only created from the main branch" >> $GITHUB_STEP_SUMMARY
          fi
