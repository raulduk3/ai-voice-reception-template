name: Build and Release AI Voice Template Build

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: "18"
  REPO_NAME: ${{ github.event.repository.name }}

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm install

      - name: Build optimized files
        run: npm run build

      - name: Display version info
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "🏷️ Building version: v${VERSION}"
          echo "## 📋 Build Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Template Version**: v${VERSION}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch/Ref**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY

      - name: Display build info
        run: |
          echo "## 📊 Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
          cat dist/build-info.json >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: Display token usage
        run: |
          if [ -f dist/token-usage-report.json ]; then
            echo "## 🎯 Token Usage Analysis" >> $GITHUB_STEP_SUMMARY
            TOTAL_TOKENS=$(cat dist/token-usage-report.json | jq -r '.summary.total_tokens')
            COST_PER_1K=$(cat dist/token-usage-report.json | jq -r '.cost_estimates.estimated_cost_per_1000_conversations')
            NODES=$(cat dist/token-usage-report.json | jq -r '.statistics.total_nodes')
            TOOLS=$(cat dist/token-usage-report.json | jq -r '.statistics.total_tools')
            echo "- **Total Tokens**: $(printf "%'d" $TOTAL_TOKENS)" >> $GITHUB_STEP_SUMMARY
            echo "- **Conversation Nodes**: $NODES" >> $GITHUB_STEP_SUMMARY
            echo "- **Tools Configured**: $TOOLS" >> $GITHUB_STEP_SUMMARY
            echo "- **Est. Cost per 1K Conversations**: \$$COST_PER_1K" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "<details><summary>View Detailed Token Breakdown</summary>" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
            cat dist/token-usage-report.json >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "</details>" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.REPO_NAME }}-dist
          path: dist/
          retention-days: 30

      - name: Create release archive
        if: github.ref == 'refs/heads/main'
        run: |
          cd dist
          tar -czf ../${{ env.REPO_NAME }}-optimized.tar.gz *
          cd ..

      - name: Get version from package.json
        if: github.ref == 'refs/heads/main'
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=v${VERSION}" >> $GITHUB_OUTPUT
          echo "package_version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Current version: v${VERSION}"

      - name: Extract build info for release
        if: github.ref == 'refs/heads/main'
        id: build_info
        run: |
          BUILD_STATS=$(cat dist/build-info.json)
          TOTAL_FILES=$(echo $BUILD_STATS | jq -r '.stats.totalFiles')
          ORIGINAL_SIZE=$(echo $BUILD_STATS | jq -r '.stats.originalSize')
          PROCESSED_SIZE=$(echo $BUILD_STATS | jq -r '.stats.processedSize')
          SIZE_REDUCTION=$(echo $BUILD_STATS | jq -r '.stats.totalReduction')
          BUILD_TIME=$(echo $BUILD_STATS | jq -r '.stats.processingTime')
          BUILD_DATE=$(echo $BUILD_STATS | jq -r '.buildTime')

          echo "total_files=$TOTAL_FILES" >> $GITHUB_OUTPUT
          echo "original_size=$ORIGINAL_SIZE" >> $GITHUB_OUTPUT
          echo "processed_size=$PROCESSED_SIZE" >> $GITHUB_OUTPUT
          echo "size_reduction=$SIZE_REDUCTION" >> $GITHUB_OUTPUT
          echo "build_time=$BUILD_TIME" >> $GITHUB_OUTPUT
          echo "build_date=$BUILD_DATE" >> $GITHUB_OUTPUT

          # Extract token usage if available
          if [ -f dist/token-usage-report.json ]; then
            TOKEN_REPORT=$(cat dist/token-usage-report.json)
            TOTAL_TOKENS=$(echo $TOKEN_REPORT | jq -r '.summary.total_tokens')
            COST_PER_1K=$(echo $TOKEN_REPORT | jq -r '.cost_estimates.estimated_cost_per_1000_conversations')
            TOTAL_NODES=$(echo $TOKEN_REPORT | jq -r '.statistics.total_nodes')
            TOTAL_TOOLS=$(echo $TOKEN_REPORT | jq -r '.statistics.total_tools')
            
            echo "total_tokens=$TOTAL_TOKENS" >> $GITHUB_OUTPUT
            echo "cost_per_1k=$COST_PER_1K" >> $GITHUB_OUTPUT
            echo "total_nodes=$TOTAL_NODES" >> $GITHUB_OUTPUT
            echo "total_tools=$TOTAL_TOOLS" >> $GITHUB_OUTPUT
          fi

      - name: Create or Update GitHub Release
        if: github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: "${{ env.REPO_NAME }} v${{ steps.version.outputs.package_version }}"
          body: |
            # ${{ env.REPO_NAME }} v${{ steps.version.outputs.package_version }}

            ## 🏗️ Build Information
            - 📁 **Files Processed**: ${{ steps.build_info.outputs.total_files }}
            - 📦 **Size Reduction**: ${{ steps.build_info.outputs.size_reduction }} (${{ steps.build_info.outputs.original_size }} → ${{ steps.build_info.outputs.processed_size }})
            - ⚡ **Build Time**: ${{ steps.build_info.outputs.build_time }}
            - 📅 **Build Date**: ${{ steps.build_info.outputs.build_date }}
            - 🔗 **Commit**: [`${{ github.sha }}`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})

            ## 🎯 Token Usage Analysis
            - 🔢 **Total Tokens**: ${{ steps.build_info.outputs.total_tokens }}
            - 💬 **Conversation Nodes**: ${{ steps.build_info.outputs.total_nodes }}
            - 🛠️ **Tools Configured**: ${{ steps.build_info.outputs.total_tools }}
            - 💰 **Est. Cost per 1K Calls**: \$${{ steps.build_info.outputs.cost_per_1k }}

            ## 📦 What's Included
            - Optimized Retell AI agent configuration
            - n8n workflow templates
            - Knowledge base content
            - Service-specific schemas
            - Complete build metadata

            ## 🏛️ Architecture
            Built with modular architecture:
            - ConfigurationLoader
            - ServiceSchemaEngine  
            - WebhookGenerator
            - PromptInjector
            - RuntimeVariableBuilder
            - TokenCounter
            - RetellAgentProcessor
            - N8nWorkflowProcessor
            - TemplateProcessor
          files: |
            ${{ env.REPO_NAME }}-optimized.tar.gz
          draft: false
          prerelease: false
          generate_release_notes: false

      - name: Build Status Summary
        run: |
          echo "## 🚀 AI Voice Build Complete" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Status**: ✅ Success" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY

          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "- **Current Version**: ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Package Version**: ${{ steps.version.outputs.package_version }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Release Action**: 🚀 Created/Updated release ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Download**: [Latest Release](https://github.com/${{ github.repository }}/releases/latest)" >> $GITHUB_STEP_SUMMARY
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 📊 Build Statistics" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
            cat dist/build-info.json >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### � Version Management" >> $GITHUB_STEP_SUMMARY
            echo "To create a new release:" >> $GITHUB_STEP_SUMMARY
            echo "- \`npm run release:patch\` - Bug fixes ($(echo ${{ steps.version.outputs.package_version }} | awk -F. '{print $1"."$2"."$3+1}'))" >> $GITHUB_STEP_SUMMARY
            echo "- \`npm run release:minor\` - New features ($(echo ${{ steps.version.outputs.package_version }} | awk -F. '{print $1"."$2+1".0"}'))" >> $GITHUB_STEP_SUMMARY  
            echo "- \`npm run release:major\` - Breaking changes ($(echo ${{ steps.version.outputs.package_version }} | awk -F. '{print $1+1".0.0"}'))" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Note**: Releases are only created from the main branch" >> $GITHUB_STEP_SUMMARY
          fi
